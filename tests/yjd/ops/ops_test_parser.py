from datasets import load_dataset, Dataset
import os
import argparse
from loguru import logger
# from mapper import *
import pandas as pd
import json
from mapper_parser import *

def load_data(input_file):
    # ds = Dataset.from_json(input_file, cache_dir=None)
    if not os.path.exists(input_file):
       logger.info("input file doesnt exist.")
       return None
    
    ds = Dataset.from_json(input_file, cache_dir=None)
    return ds

def export_data(ds, output_file):
    ds.to_json(output_file, force_ascii=False, indent=4)

# code_tokenize	代码分词、解释语法树



# auto_generated_filter	过滤自动生成的代码
def auto_generated_filter(ds, text_key = 'content'):
    op = AutoGeneratedFilter(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("auto generated filter")
    return res
    
# has_error_filter 识别编译错误的代码
def has_error_filter(ds, text_key = 'content'):
    op = ErrorFilter(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("has error filter")
    return res

# complexity_filter	代码复杂度
def complexity_filter(ds, text_key = 'content'):
    op = ComplexityFilter(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("complexity filter")
    return res

# extract_class	抽取类
def extract_class(ds, text_key = 'content'):
    op = ExtractClass(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("extract class")
    return res

# extract_function	抽取函数
def extract_function(ds, text_key = 'content'):
    op = ExtractFunction(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("extract function")
    return res

# extract_block	抽取代码块
def extract_block(ds, text_key = 'content'):
    op = ExtractBlock(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("extract block")
    return res

# extract_comment	抽取注释块
def extract_comment(ds, text_key = 'content'):
    op = ExtractComment(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("extract comment")
    return res

# func_with_docstring	抽取带注释块的函数
def func_with_docstring(ds, text_key = 'content'):
    op = FuncWithDocstring(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("func with docstring")
    return res
# extract_line	抽取单行
def extract_line(ds, text_key = 'content'):
    op = ExtractLine(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("extract line")
    return res

# extract_token	抽取单词
def extract_token(ds, text_key = 'content'):
    op = ExtractToken(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("extract token")
    return res

# extract_parenthes	抽取括号 只取单行的括号
def extract_parenthes(ds, text_key = 'content'):
    op = ExtractParenthes(text_key = text_key)
    res = ds.map(function=op.process)
    logger.info("extract parenthes")
    return res

def parser_args():
    parser = argparse.ArgumentParser(description='Acepilot Data')
    parser.add_argument('-i', '--input_file', default=None, help='input file')
    parser.add_argument('-o', '--output_dir', default=None, help='output path')
    parser.add_argument('-k', '--text_key',   default='content', help='text key')
    return parser.parse_args()

def main():
    args = parser_args()
    
    if args.input_file:
        input_file = args.input_file
    else:
        logger.info(f"no input file.")

    if args.output_dir:
        output_dir = args.output_dir
    else:
        logger.info(f"no output dir.")
    
    text_key = args.text_key



    ds = load_data(input_file)
    
    ds = has_error_filter(ds,text_key='text')
    export_data(ds, os.path.join(output_dir,'has_error_filter'+'.jsonl'))

    # ds = complexity_filter(ds)
    # export_data(ds, os.path.join(output_dir,'complexity_filter'+'.jsonl'))

    # ds = extract_class(ds)
    # export_data(ds, os.path.join(output_dir,'extract_class'+'.jsonl'))

    # ds = extract_function(ds)
    # export_data(ds, os.path.join(output_dir,'extract_function'+'.jsonl'))

    # ds = extract_block(ds)
    # export_data(ds, os.path.join(output_dir,'extract_block'+'.jsonl'))
    
    # ds = extract_comment(ds)
    # export_data(ds, os.path.join(output_dir,'extract_comment'+'.jsonl'))

    # ds = extract_line(ds)
    # export_data(ds, os.path.join(output_dir,'extract_line'+'.jsonl'))

    # ds = extract_parenthes(ds)
    # export_data(ds, os.path.join(output_dir,'extract_parenthes'+'.jsonl'))
   
    # ds = extract_token(ds)
    # export_data(ds, os.path.join(output_dir,'extract_token'+'.jsonl'))

    # ds = func_with_docstring(ds)
    # export_data(ds, os.path.join(output_dir,'func_with_docstring'+'.jsonl'))

    # ds = auto_generated_filter(ds)
    # export_data(ds, os.path.join(output_dir,'auto_generated_filter'+'.jsonl'))

    
if __name__ == "__main__":
    main()

# python ops_test.py -i /home/data_test/sjl/process/ops/data/mapper_test.jsonl -o /home/data_test/sjl/process/ops/output